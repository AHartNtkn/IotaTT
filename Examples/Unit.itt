module Unit where

cUnit : U[0] = (A : U[0]) -> A -> A

ctt : cUnit = \ A a . a

Unit : U[0] = i (u : cUnit) . (P : cUnit -> U[0]) -> P ctt -> P u

tt : Unit = [ ctt | \ P a . a ]

UnitInd : (P : Unit -> U[0]) -> P tt -> (u : Unit) -> P u
        = \ P ptt u .
            u.2
              (\(x : cUnit) . (X : U[0]) -> ((x' : Unit) -> (x ~ x') -> P x' -> X) -> X)
              (\ X c . c tt B ptt)
              (P u)
              (\x' eq u2 . r(x . P x) (r(o . o ~ u) eq . B) . u2)
