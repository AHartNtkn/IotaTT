module Bool where

cBool : * = (X : *) -> X -> X -> X

cTrue : cBool = \ X t f . t

cFalse : cBool = \ X t f . f

Bool : * = i (b : cBool) . (P : cBool -> *) -> P cTrue -> P cFalse -> P b

True : Bool = [ cTrue | \ X t f . t ]

False : Bool = [ cFalse | \ X t f . f ]

BoolInd : (P : Bool -> *) -> P True -> P False -> (b : Bool) -> P b
    = \ P pt pf b .
        b.2
          (\(x : cBool) . (X : *) -> ((x' : Bool) -> (x ~ x') -> P x' -> X) -> X)
          (\ X c . c True B pt)
          (\ X c . c False B pf)
          (P b)
          (\x' eq u2 . r(x . P x) (r(o . o ~ b) eq . B) . u2)
