module NatStuff where

import Sigma
import Coproduct
import Nat

one   : Nat = S Z
two   : Nat = S one
three : Nat = S two
four  : Nat = S three
five  : Nat = S four
six   : Nat = S five
seven : Nat = S six
eight : Nat = S seven
nine  : Nat = S eight
ten   : Nat = S nine

plus : Nat -> Nat -> Nat
     = NatInd (\ n . Nat -> Nat)
              (/ n . \ re m . S (re m))
              (\ m . m)

plusTest : plus three five ~ eight = B

natSplit : (n : Nat) -> Coproduct (n ~ Z) (Sigma Nat (\ m . n ~ S m))
  = NatInd (\ n . Coproduct (n ~ Z) (Sigma Nat (\ m . n ~ S m)))
           (/ n . \ re . Inr ((S n) ~ Z) (Sigma Nat (\ m . S n ~ S m)) (Pair Nat (\ m . S n ~ S m) n B))
           (Inl (Z ~ Z) (Sigma Nat (\ m . Z ~ S m)) B)

{- How to prove these?
sPlus : (n : Nat) (m : Nat) -> plus (S n) m ~ S (plus n m)
  = \ n m . B

plusAssoc : (n : Nat) (m : Nat) (o : Nat) -> plus n (plus m o) ~ plus (plus n m) o
   = NatInd (\ n . (m : Nat) (o : Nat) -> plus n (plus m o) ~ plus (plus n m) o)
            (/ n . \ re m o . r( x . S (plus n (plus m o)) ~ S x ) (re m o) . B) 
            (\ m o . B)
-}

times : Nat -> Nat -> Nat
   = NatInd (\ n . Nat -> Nat)
            (/ n . \ re m . plus m (re m))
            (\ m . Z)

timesTest : times eight two ~ times four four = B

sub : Nat -> Nat
  = \ n . CoprodElim (n ~ Z) (Sigma Nat (\ m . n ~ S m))
                     (\ c . Nat) (\_ . Z) (\ p . fst Nat (\ m . n ~ S m) p) (natSplit n)

subTest : sub three ~ two = B

sub2 : Nat -> Nat = NatInd (\ n . Nat) (/ n . \ re . n) Z

sub2Test : sub2 three ~ two = B

{- How to prove these?
sub2Lem : (n : Nat) -> sub2 (S n) ~ n = \ n . B

subEq : (n : Nat) -> sub n ~ sub2 n
  =  NatInd (\ n . sub n ~ sub2 n) (/ n . \ re . re) B
-}