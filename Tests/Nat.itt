module Nat where

cNat : * = A (a : *) . (a -> a) -> a -> a

cZ : cNat = V a . \ s , z . z

cS : cNat -> cNat = \ n . V a . \ s , z . s (n + a s z)

Nat : * = i (x : cNat) . A (Q : cNat -> *) . ({x : cNat} -> Q x -> Q (cS x)) -> Q cZ -> Q x

Z : Nat = [ cZ | cZ ]

S : Nat -> Nat = \ n . [ cS n.1 | (V P . \ s , z . s - n.1 (n.2 + P s z)) ]

NatInd : A (Q : Nat -> *) . ({x : Nat} -> Q x -> Q (S x)) -> Q Z -> (x : Nat) -> Q x
       = V Q . \ s , z , x .
             x.2
             + (\ (x : cNat) . A (X : *) . ((x' : Nat) -> (x ~ x') -> Q x' -> X) -> X)
             (/ x' . \ ih . V X . \ c .
                     ih + X (\ x'' , e , u . c (S x'') (r (o : (S x') ~ (S o)) e . B) (s - x'' u)))
             (V X . \ c . c Z B z)
             + (Q x)
             (\x' , e , u . r (x : Q x) (r (o : o ~ x) e . B) . u)
