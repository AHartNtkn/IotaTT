module Nat where

cNat : * = (a : *) -> (a -> a) -> a -> a

cZ : cNat = \ a s z . z

cS : cNat -> cNat = \ n a s z . s (n a s z)

Nat : * = i (x : cNat) . (Q : cNat -> *) -> ({x : cNat} -> Q x -> Q (cS x)) -> Q cZ -> Q x

Z : Nat = [ cZ | \ a s z . z ]

S : Nat -> Nat = \ n . [ cS n.1 | \ P s z . s -n.1 (n.2 P s z) ]

NatInd : (Q : Nat -> *) -> ({x : Nat} -> Q x -> Q (S x)) -> Q Z -> (x : Nat) -> Q x
       = \ Q s z x .
           x.2
             (\ (x : cNat) . (X : *) -> ((x' : Nat) -> (x ~ x') -> Q x' -> X) -> X)
             (/ x' . \ ih X c .
                     ih X (\ x'' e u . c (S x'') (r(o . S x' ~ S o) e . B) (s -x'' u)))
             (\ X c . c Z B z)
             (Q x)
             (\x' e u . r(x . Q x) (r(o . o ~ x) e . B) . u)
