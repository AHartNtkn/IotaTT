module Nat where

import Sigma
import Coproduct

cNat : * = (a : *) -> (a -> a) -> a -> a

cZ : cNat = \ a s z . z

cS : cNat -> cNat = \ n a s z . s (n a s z)

Nat : * = i (x : cNat) . (Q : cNat -> *) -> ({x : cNat} -> Q x -> Q (cS x)) -> Q cZ -> Q x

Z : Nat = [ cZ | \ a s z . z ]

S : Nat -> Nat = \ n . [ cS n.1 | \ P s z . s -n.1 (n.2 P s z) ]

NatInd : (Q : Nat -> *) -> ({x : Nat} -> Q x -> Q (S x)) -> Q Z -> (x : Nat) -> Q x
       = \ Q s z x .
           x.2
             (\ (x : cNat) . (X : *) -> ((x' : Nat) -> (x ~ x') -> Q x' -> X) -> X)
             (/ x' . \ ih X c .
                     ih X (\ x'' e u . c (S x'') (r(o . S x' ~ S o) e . B) (s -x'' u)))
             (\ X c . c Z B z)
             (Q x)
             (\x' e u . r(x . Q x) (r(o . o ~ x) e . B) . u)

one   : Nat = S Z
two   : Nat = S one
three : Nat = S two
four  : Nat = S three
five  : Nat = S four
six   : Nat = S five
seven : Nat = S six
eight : Nat = S seven
nine  : Nat = S eight
ten   : Nat = S nine

plus : Nat -> Nat -> Nat
     = NatInd (\ n . Nat -> Nat)
              (/ n . \ re m . S (re m))
              (\ m . m)

plusTest : plus three five ~ eight = B

natSplit : (n : Nat) -> Coproduct (n ~ Z) (Sigma Nat (\ m . n ~ S m))
  = NatInd (\ n . Coproduct (n ~ Z) (Sigma Nat (\ m . n ~ S m)))
           (/ n . \ re . Inr ((S n) ~ Z) (Sigma Nat (\ m . S n ~ S m)) (Pair Nat (\ m . S n ~ S m) n B))
           (Inl (Z ~ Z) (Sigma Nat (\ m . Z ~ S m)) B)

{- How to prove these?
sPlus : (n : Nat) (m : Nat) -> plus (S n) m ~ S (plus n m)
  = \ n m . B

plusAssoc : (n : Nat) (m : Nat) (o : Nat) -> plus n (plus m o) ~ plus (plus n m) o
   = NatInd (\ n . (m : Nat) (o : Nat) -> plus n (plus m o) ~ plus (plus n m) o)
            (/ n . \ re m o . r( x . S (plus n (plus m o)) ~ S x ) (re m o) . B) 
            (\ m o . B)
-}

times : Nat -> Nat -> Nat
   = NatInd (\ n . Nat -> Nat)
            (/ n . \ re m . plus m (re m))
            (\ m . Z)

timesTest : times eight two ~ times four four = B
